{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer/source-files\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport rehypeSlug from \"rehype-slug\";\nimport remarkGfm from \"remark-gfm\";\n\nconst computedFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.flattenedPath,\n  },\n};\n\n// Blog\nexport const Blog = defineDocumentType(() => ({\n  name: \"Blog\",\n  filePathPattern: `**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    publishedAt: {\n      type: \"string\",\n      required: true,\n    },\n    author: {\n      type: \"string\",\n    },\n    summary: {\n      type: \"string\",\n      required: true,\n    },\n    image: {\n      type: \"string\",\n    },\n  },\n  computedFields,\n}));\n\n// Thoughts\nexport const Thought = defineDocumentType(() => ({\n  name: \"Thought\",\n  filePathPattern: `**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    publishedAt: {\n      type: \"string\",\n      required: true,\n    },\n    author: {\n      type: \"string\",\n    },\n    summary: {\n      type: \"string\",\n      required: true,\n    },\n    image: {\n      type: \"string\",\n    },\n  },\n  computedFields,\n}));\n\nexport default makeSource({\n  // contentDirPath: \"content\",\n  contentDirPath: [\"content/blog\", \"content/thoughts\"],\n  documentTypes: [Blog, Thought],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      [\n        rehypePrettyCode,\n        {\n          theme: \"one-dark-pro\",\n          onVisitLine(node) {\n            // Prevent lines from collapsing in `display: grid` mode, and allow empty\n            // lines to be copy/pasted\n            if (node.children.length === 0) {\n              node.children = [{ type: \"text\", value: \" \" }];\n            }\n          },\n          onVisitHighlightedLine(node) {\n            node.properties.className.push(\"line--highlighted\");\n          },\n          onVisitHighlightedWord(node) {\n            node.properties.className = [\"word--highlighted\"];\n          },\n        },\n      ],\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: [\"anchor\"],\n          },\n        },\n      ],\n    ],\n  },\n});\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,4BAA4B;AACnC,OAAO,sBAAsB;AAC7B,OAAO,gBAAgB;AACvB,OAAO,eAAe;AAEtB,IAAM,iBAAiB;AAAA,EACrB,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK;AAAA,EAC7B;AACF;AAGO,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,IACR;AAAA,IACA,SAAS;AAAA,MACP,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,IACR;AAAA,EACF;AAAA,EACA;AACF,EAAE;AAGK,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC/C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,IACR;AAAA,IACA,SAAS;AAAA,MACP,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,IACR;AAAA,EACF;AAAA,EACA;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA;AAAA,EAExB,gBAAgB,CAAC,gBAAgB,kBAAkB;AAAA,EACnD,eAAe,CAAC,MAAM,OAAO;AAAA,EAC7B,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACb;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,OAAO;AAAA,UACP,YAAY,MAAM;AAGhB,gBAAI,KAAK,SAAS,WAAW,GAAG;AAC9B,mBAAK,WAAW,CAAC,EAAE,MAAM,QAAQ,OAAO,IAAI,CAAC;AAAA,YAC/C;AAAA,UACF;AAAA,UACA,uBAAuB,MAAM;AAC3B,iBAAK,WAAW,UAAU,KAAK,mBAAmB;AAAA,UACpD;AAAA,UACA,uBAAuB,MAAM;AAC3B,iBAAK,WAAW,YAAY,CAAC,mBAAmB;AAAA,UAClD;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,YAAY;AAAA,YACV,WAAW,CAAC,QAAQ;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
